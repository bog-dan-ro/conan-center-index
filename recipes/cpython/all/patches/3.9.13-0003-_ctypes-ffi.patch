--- Modules/_ctypes/cfield.c
+++ Modules/_ctypes/cfield.c
@@ -1504,7 +1504,11 @@ P_get(void *ptr, Py_ssize_t size)
     return PyLong_FromVoidPtr(*(void **)ptr);
 }
 
-static struct fielddesc formattable[] = {
+#define FORMATTABLE_SIZE 30
+static struct fielddesc formattable[FORMATTABLE_SIZE];
+
+static void formattable_init(void) {
+struct fielddesc my_formattable[] = {
     { 's', s_set, s_get, &ffi_type_pointer},
     { 'b', b_set, b_get, &ffi_type_schar},
     { 'B', B_set, B_get, &ffi_type_uchar},
@@ -1558,6 +1562,11 @@ static struct fielddesc formattable[] = {
     { 'O', O_set, O_get, &ffi_type_pointer},
     { 0, NULL, NULL, NULL},
 };
+    size_t nb = 1;
+    for (struct fielddesc *pos = my_formattable; pos->code; ++pos, ++nb);
+    if (FORMATTABLE_SIZE < nb) abort();
+    memcpy(formattable, my_formattable, nb * sizeof(struct fielddesc));
+}
 
 /*
   Ideas: Implement VARIANT in this table, using 'V' code.
@@ -1572,6 +1581,7 @@ _ctypes_get_fielddesc(const char *fmt)
 
     if (!initialized) {
         initialized = 1;
+        formattable_init();
 #ifdef CTYPES_UNICODE
         if (sizeof(wchar_t) == sizeof(short))
             _ctypes_get_fielddesc("u")->pffi_type = &ffi_type_sshort;
@@ -1634,7 +1644,7 @@ typedef struct _ffi_type
     struct _ffi_type **elements;
 } ffi_type;
 */
-
+#if 0
 /* align and size are bogus for void, but they must not be zero */
 ffi_type ffi_type_void = { 1, 1, FFI_TYPE_VOID };
 
@@ -1661,5 +1671,5 @@ ffi_type ffi_type_longdouble = { sizeof(long double), LONGDOUBLE_ALIGN,
                                  FFI_TYPE_LONGDOUBLE };
 
 ffi_type ffi_type_pointer = { sizeof(void *), VOID_P_ALIGN, FFI_TYPE_POINTER };
-
+#endif
 /*---------------- EOF ----------------*/
